%s = formatted variable, string
%d = formatted variable, decimal integer
%x = formatted variable, hexadecimal
%c = formatted variable, single character
%X = formatted variable, hexadecimal in caps
%o = formatted variable, octal
%b = formatted variable, binary
%f = formatted variable, floating point
%0.0f = formatted variable, floating point (put the number of digits either side of the .)
# = hash
+ = plus
- = minus
% = modulo
* = times/multiply
#{} = string interpolation method, any block you like!
\n = newline
\t = tab
\\ = \
\b = backspace
\r = carriage return
\a = bell (ding-ding!)
<<AWORD
#some lines
AWORD = document syntax, takes everything, including new lines
#gets = gets an input from somewhere
#chomp = eats the last character from a string
require = requires a library for this file
include = um...
#each.line = method that offers up each line of a file/webpage to a block
#base_uri = URI or ios
#charset = characterset
#content_encoding = encoding of the content
#last_modified = really?
ARGV = the array of command line arguments (argument variables)
$0 = the file name of the script being run
STDIN = Standard Input - get some CLI
array#first = first item in an array
File#open(filename, options) = opens a new File object into the script. Options include 'w', which makes the file available for writing. Equivalent of File#new
File#read() = returns the file as a string, takes an argument of the number of characters
File#inspect = information about the file (including open/closed status)
File#foreach = passes each line in series into a block
File#truncate(int) = truncates a file to a int number of bytes. Wipes it clean.
File#close = closes the file (it's polite)
File#exists?(filename) = does the file exist, returns a boolean
File#length = length of file in bytes
